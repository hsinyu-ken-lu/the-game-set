{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  shape: [\"rectangle\", \"triangle\", \"diamond\"],\n  color: [\"yellow\", \"green\", \"red\"],\n  number: [1, 2, 3],\n  shading: [\"fill\", \"transparent\", \"pattern-checkers\"],\n  deck: [],\n  currentDeck: []\n};\nconst store = /*#__PURE__*/createContext(initialState);\nconst {\n  Provider\n} = store;\n\nconst StateProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'GenerateDeck':\n        console.log(JSON.stringify(state.shape));\n        let card_deck = [];\n\n        for (let shape in state.shape) {\n          for (let color in state.color) {\n            for (let number in state.number) {\n              for (let shading in state.shading) {\n                let card = {};\n                card.shape = state.shape[shape];\n                card.color = state.color[color];\n                card.number = state.number[number];\n                card.shading = state.shading[shading];\n                card_deck.push(card);\n              }\n            }\n          }\n        }\n\n        return { ...state,\n          deck: card_deck\n        };\n\n      case 'Reset':\n        return {};\n\n      default:\n        throw new Error();\n    }\n\n    ;\n  }, initialState);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n\n_s(StateProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StateProvider;\nexport { store, StateProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js"],"names":["React","createContext","useReducer","initialState","shape","color","number","shading","deck","currentDeck","store","Provider","StateProvider","children","state","dispatch","action","type","console","log","JSON","stringify","card_deck","card","push","Error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,QAA+C,OAA/C;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,CAAC,WAAD,EAAa,UAAb,EAAwB,SAAxB,CADW;AAEjBC,EAAAA,KAAK,EAAC,CAAC,QAAD,EAAU,OAAV,EAAkB,KAAlB,CAFW;AAGjBC,EAAAA,MAAM,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHU;AAIjBC,EAAAA,OAAO,EAAC,CAAC,MAAD,EAAQ,aAAR,EAAsB,kBAAtB,CAJS;AAKjBC,EAAAA,IAAI,EAAC,EALY;AAMjBC,EAAAA,WAAW,EAAC;AANK,CAArB;AAQA,MAAMC,KAAK,gBAAGT,aAAa,CAACE,YAAD,CAA3B;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAeD,KAArB;;AAEA,MAAME,aAAa,GAAG,CAAE;AAAEC,EAAAA;AAAF,CAAF,KAAoB;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAAC,CAACY,KAAD,EAAQE,MAAR,KAAmB;AACpD,YAAOA,MAAM,CAACC,IAAd;AACA,WAAK,cAAL;AACIC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeP,KAAK,CAACV,KAArB,CAAZ;AACA,YAAIkB,SAAS,GAAG,EAAhB;;AACA,aAAI,IAAIlB,KAAR,IAAiBU,KAAK,CAACV,KAAvB,EAA6B;AACzB,eAAI,IAAIC,KAAR,IAAiBS,KAAK,CAACT,KAAvB,EAA6B;AACzB,iBAAI,IAAIC,MAAR,IAAkBQ,KAAK,CAACR,MAAxB,EAA+B;AAC3B,mBAAI,IAAIC,OAAR,IAAmBO,KAAK,CAACP,OAAzB,EAAiC;AAC7B,oBAAIgB,IAAI,GAAG,EAAX;AACAA,gBAAAA,IAAI,CAACnB,KAAL,GAAaU,KAAK,CAACV,KAAN,CAAYA,KAAZ,CAAb;AACAmB,gBAAAA,IAAI,CAAClB,KAAL,GAAaS,KAAK,CAACT,KAAN,CAAYA,KAAZ,CAAb;AACAkB,gBAAAA,IAAI,CAACjB,MAAL,GAAcQ,KAAK,CAACR,MAAN,CAAaA,MAAb,CAAd;AACAiB,gBAAAA,IAAI,CAAChB,OAAL,GAAeO,KAAK,CAACP,OAAN,CAAcA,OAAd,CAAf;AACAe,gBAAAA,SAAS,CAACE,IAAV,CAAeD,IAAf;AACH;AACJ;AACJ;AACJ;;AACD,eAAO,EACH,GAAGT,KADA;AACON,UAAAA,IAAI,EAACc;AADZ,SAAP;;AAGJ,WAAK,OAAL;AAEI,eAAO,EAAP;;AACJ;AACI,cAAM,IAAIG,KAAJ,EAAN;AAzBJ;;AA0BC;AACJ,GA5BmC,EA4BjCtB,YA5BiC,CAApC;AA8BF,sBAAO,QAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjB;AAAA,cAAuCF;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhCD;;GAAMD,a;;KAAAA,a;AAkCN,SAASF,KAAT,EAAgBE,aAAhB","sourcesContent":["import React, {createContext, useReducer} from 'react';\n\nconst initialState = {\n    shape:[\"rectangle\",\"triangle\",\"diamond\"],\n    color:[\"yellow\",\"green\",\"red\"],\n    number:[1,2,3],\n    shading:[\"fill\",\"transparent\",\"pattern-checkers\"],\n    deck:[],\n    currentDeck:[]\n};\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ( { children } ) => {\n    const [state, dispatch] = useReducer((state, action) => {\n        switch(action.type) {\n        case 'GenerateDeck':\n            console.log(JSON.stringify(state.shape));\n            let card_deck = []\n            for(let shape in state.shape){\n                for(let color in state.color){\n                    for(let number in state.number){\n                        for(let shading in state.shading){\n                            let card = {};\n                            card.shape = state.shape[shape];\n                            card.color = state.color[color];\n                            card.number = state.number[number];\n                            card.shading = state.shading[shading];\n                            card_deck.push(card);\n                        }\n                    }\n                }\n            }\n            return {\n                ...state, deck:card_deck\n            };\n        case 'Reset':\n            \n            return {};\n        default:\n            throw new Error();\n        };\n    }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider }"]},"metadata":{},"sourceType":"module"}