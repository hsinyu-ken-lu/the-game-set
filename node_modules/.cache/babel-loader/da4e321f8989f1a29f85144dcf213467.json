{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport './Game.css';\nimport Card from './Card.js';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [shapeArr, setShapeArr] = useState([\"rectangle\", \"triangle\", \"diamond\"]);\n  const [colorArr, setColorArr] = useState([\"yellow\", \"green\", \"red\"]);\n  const [numArr, setNumArr] = useState([1, 2, 3]);\n  const [shadingArr, setShadingArr] = useState([\"fill\", \"transparent\", \"pattern-checkers\"]);\n  const [deck, setDeck] = useState([]);\n  const [currentDeck, setCurrentDeck] = useState([]);\n  const globalState = useContext(store);\n  const {\n    state,\n    dispatch\n  } = globalState; // useEffect(() => {\n  //     generate_deck();\n  // },[]);\n\n  const generate_deck = () => {\n    dispatch({\n      type: 'GenerateDeck'\n    });\n  };\n\n  const clear = () => {\n    generate_deck();\n  };\n\n  const start_game = () => {\n    dispatch({\n      type: \"Reset\"\n    });\n  };\n\n  const draw_cards = () => {\n    dispatch({\n      type: \"Draw\"\n    });\n  };\n\n  const shuffle_card = () => {\n    let new_deck = deck;\n\n    for (let i = new_deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = new_deck[i];\n      new_deck[i] = new_deck[j];\n      new_deck[j] = temp;\n    }\n\n    setDeck(new_deck);\n  };\n\n  const generate_cards = () => {\n    let elements = [];\n    let number = state.currentDeck.length;\n\n    for (let i = 0; i < number; i++) {\n      let card = state.currentDeck[i];\n      elements.push( /*#__PURE__*/_jsxDEV(Card, {\n        data_key: i,\n        shape: card.shape,\n        color: card.color,\n        number: card.number,\n        shading: card.shading\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this));\n    }\n\n    return elements;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contoller_zone\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => clear(),\n        children: \"CLEAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => start_game(),\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => draw_cards(),\n        children: \"DRAW\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        children: deck.length - currentDeck.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-zone\",\n      children: generate_cards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"1NZEpRlkpCcyGx02sZI8FbBOV38=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js"],"names":["Card","React","useState","useContext","useEffect","store","Game","shapeArr","setShapeArr","colorArr","setColorArr","numArr","setNumArr","shadingArr","setShadingArr","deck","setDeck","currentDeck","setCurrentDeck","globalState","state","dispatch","generate_deck","type","clear","start_game","draw_cards","shuffle_card","new_deck","i","length","j","Math","floor","random","temp","generate_cards","elements","number","card","push","shape","color","shading"],"mappings":"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","sourcesContent":["import './Game.css';\nimport Card from './Card.js'\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\n\nfunction Game() {\n\n    const [shapeArr, setShapeArr] = useState([\"rectangle\",\"triangle\",\"diamond\"]);\n    const [colorArr, setColorArr] = useState([\"yellow\",\"green\",\"red\"]);\n    const [numArr, setNumArr] = useState([1,2,3]);\n    const [shadingArr, setShadingArr] = useState([\"fill\",\"transparent\",\"pattern-checkers\"]);\n\n    const [deck, setDeck] = useState([]);\n    const [currentDeck, setCurrentDeck] = useState([]);\n\n    const globalState = useContext(store);\n    const { state, dispatch } = globalState;\n\n    // useEffect(() => {\n    //     generate_deck();\n    // },[]);\n\n    const generate_deck = () => {\n        dispatch({ type: 'GenerateDeck' })\n    }\n\n    const clear = () => {\n        generate_deck();\n    }\n   \n    const start_game = () => {\n        dispatch({type:\"Reset\"});\n    }\n\n    const draw_cards = () => {\n        dispatch({type:\"Draw\"});\n    }\n\n    const shuffle_card = () => {\n        let new_deck = deck;\n        for (let i = new_deck.length - 1; i > 0; i--) {  \n            let j = Math.floor(Math.random() * (i + 1)); \n            let temp = new_deck[i]; \n            new_deck[i] = new_deck[j]; \n            new_deck[j] = temp; \n        }\n        setDeck(new_deck);\n    }\n\n    const generate_cards = () => {\n        let elements = [];\n        let number = state.currentDeck.length;\n        for(let i = 0; i < number; i++){\n            let card = state.currentDeck[i];\n            elements.push(\n                <Card key={i} data_key={i} shape={card.shape} color={card.color} number={card.number} shading={card.shading}/>\n            );\n        }\n        return elements;\n    }\n\n    return (\n        <div>\n            <div className=\"contoller_zone\">\n                <div className=\"controller-button\" onClick = {() => clear()}>\n                    CLEAR\n                </div>\n                <div className=\"controller-button\" onClick = {() => start_game()}>\n                    RESET\n                </div>\n                <div className=\"controller-button\" onClick = {() => draw_cards()}>\n                    DRAW\n                </div>\n                <div className=\"controller-button\">\n                    {deck.length - currentDeck.length}\n                </div>\n            </div>\n            <div className=\"card-zone\">\n                {generate_cards()}\n            </div>\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}