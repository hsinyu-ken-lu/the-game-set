{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  level: \"medium\",\n  messege: \"Welcome to SET\",\n  shape: [\"rectangle\", \"triangle\", \"diamond\"],\n  color: [\"orange\", \"green\", \"red\"],\n  number: [1, 2, 3],\n  shading: [\"fill\", \"transparent\", \"pattern-checkers\"],\n  deck: [],\n  currentDeck: [],\n  currentIndex: 0,\n  clickedCard: [],\n  clickedCardLength: 0\n};\nconst store = /*#__PURE__*/createContext(initialState);\nconst {\n  Provider\n} = store;\n\nconst StateProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer((state, action) => {\n    let name = action.level;\n\n    switch (action.type) {\n      case 'GenerateDeck':\n        let card_deck = [];\n\n        for (let shape in state.shape) {\n          for (let color in state.color) {\n            for (let number in state.number) {\n              for (let shading in state.shading) {\n                let card = {};\n                card.shape = state.shape[shape];\n                card.color = state.color[color];\n                card.number = state.number[number];\n                card.shading = state.shading[shading];\n                card_deck.push(card);\n              }\n            }\n          }\n        }\n\n        return { ...state,\n          deck: card_deck,\n          level: level\n        };\n\n      case 'Reset':\n        // shuffle_card\n        let new_deck = state.deck;\n\n        for (let i = new_deck.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = new_deck[i];\n          new_deck[i] = new_deck[j];\n          new_deck[j] = temp;\n        } // create_new_current_deck();\n\n\n        let new_current_deck = [];\n\n        for (let i = 0; i < 12; i++) {\n          new_current_deck.push(new_deck[i]);\n        }\n\n        return { ...state,\n          deck: new_deck,\n          currentDeck: [...new_current_deck],\n          currentIndex: 12,\n          messege: \"Welcome to SET\",\n          clickedCard: [],\n          clickedCardLength: 0\n        };\n\n      case 'Draw':\n        let add_deck = [];\n        console.log(state.currentDeck.length + \", \" + state.deck.length + \", \" + state.currentIndex);\n\n        if (state.currentIndex < 81) {\n          for (let i = state.currentIndex; i < state.currentIndex + 3; i++) {\n            add_deck.push(state.deck[i]);\n          }\n        } else {\n          return { ...state,\n            messege: \"No more Cards\"\n          };\n        }\n\n        return { ...state,\n          currentDeck: [...state.currentDeck, ...add_deck],\n          currentIndex: state.currentIndex + 3\n        };\n\n      case 'CARDCLICK':\n        let newClickedCard = [...state.clickedCard];\n        let newClickedCardLength = state.clickedCardLength; //If clicked, then cancel\n\n        if (state.clickedCard.includes(action.data_key)) {\n          var index = state.clickedCard.indexOf(action.data_key);\n\n          if (index > -1) {\n            state.clickedCard.splice(index, 1);\n          }\n\n          newClickedCardLength = newClickedCardLength - 1;\n          return { ...state,\n            clickedCard: state.clickedCard,\n            clickedCardLength: newClickedCardLength\n          };\n        } else {\n          if (newClickedCard.length < 3) {\n            newClickedCard.push(action.data_key);\n            newClickedCardLength = newClickedCardLength + 1;\n          }\n        }\n\n        return { ...state,\n          clickedCard: newClickedCard,\n          clickedCardLength: newClickedCardLength\n        };\n\n      case 'Check':\n        if (state.clickedCard.length === 3) {\n          let firCard = state.currentDeck[state.clickedCard[0]];\n          let secCard = state.currentDeck[state.clickedCard[1]];\n          let thirCard = state.currentDeck[state.clickedCard[2]];\n          let isSet = (firCard.color === secCard.color && firCard.color === thirCard.color && secCard.color === thirCard.color || firCard.color !== secCard.color && firCard.color !== thirCard.color && secCard.color !== thirCard.color) && (firCard.shape === secCard.shape && firCard.shape === thirCard.shape && secCard.shape === thirCard.shape || firCard.shape !== secCard.shape && firCard.shape !== thirCard.shape && secCard.shape !== thirCard.shape) && (firCard.number === secCard.number && firCard.number === thirCard.number && secCard.number === thirCard.number || firCard.number !== secCard.number && firCard.number !== thirCard.number && secCard.number !== thirCard.number) && (firCard.shading === secCard.shading && firCard.shading === thirCard.shading && secCard.shading === thirCard.shading || firCard.shading !== secCard.shading && firCard.shading !== thirCard.shading && secCard.shading !== thirCard.shading);\n          let newCurrentDeck = [...state.currentDeck];\n          let sortDeck = [state.clickedCard[0], state.clickedCard[1], state.clickedCard[2]];\n          let newMessge = \"\";\n          let newCurrentIndex = state.currentIndex; //Compare Set\n\n          if (isSet) {\n            let numberSort = function (a, b) {\n              return a - b;\n            };\n\n            sortDeck.sort(numberSort);\n\n            for (let i = sortDeck.length - 1; i >= 0; i--) {\n              newCurrentDeck.splice(sortDeck[i], 1);\n            }\n\n            newMessge = \"SET is removed\";\n\n            if (newCurrentDeck.length < 12 && state.currentIndex < 81) {\n              for (let i = state.currentIndex; i < state.currentIndex + 3; i++) {\n                newCurrentDeck.push(state.deck[i]);\n              }\n\n              newCurrentIndex = state.currentIndex + 3;\n            }\n          } else {\n            newMessge = \"Not a SET\";\n          }\n\n          return { ...state,\n            clickedCard: [],\n            currentDeck: newCurrentDeck,\n            messege: newMessge,\n            currentIndex: newCurrentIndex,\n            clickedCardLength: 0\n          };\n        } else if (state.clickedCard.includes(action.data_key)) {}\n\n        return { ...state\n        };\n\n      default:\n        throw new Error();\n    }\n\n    ;\n  }, initialState);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 12\n  }, this);\n};\n\n_s(StateProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StateProvider;\nexport { store, StateProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js"],"names":["React","createContext","useReducer","initialState","level","messege","shape","color","number","shading","deck","currentDeck","currentIndex","clickedCard","clickedCardLength","store","Provider","StateProvider","children","state","dispatch","action","name","type","card_deck","card","push","new_deck","i","length","j","Math","floor","random","temp","new_current_deck","add_deck","console","log","newClickedCard","newClickedCardLength","includes","data_key","index","indexOf","splice","firCard","secCard","thirCard","isSet","newCurrentDeck","sortDeck","newMessge","newCurrentIndex","numberSort","a","b","sort","Error"],"mappings":"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","sourcesContent":["import React, {createContext, useReducer} from 'react';\n\nconst initialState = {\n    level:\"medium\",\n    messege:\"Welcome to SET\",\n    shape:[\"rectangle\",\"triangle\",\"diamond\"],\n    color:[\"orange\",\"green\",\"red\"],\n    number:[1,2,3],\n    shading:[\"fill\",\"transparent\",\"pattern-checkers\"],\n    deck:[],\n    currentDeck:[],\n    currentIndex:0,\n    clickedCard:[],\n    clickedCardLength:0\n};\n\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ( { children } ) => {\n    const [state, dispatch] = useReducer((state, action) => {\n        let name = action.level;\n        switch(action.type) {\n            case 'GenerateDeck':\n                let card_deck = [];\n                for(let shape in state.shape){\n                    for(let color in state.color){\n                        for(let number in state.number){\n                            for(let shading in state.shading){\n                                let card = {};\n                                card.shape = state.shape[shape];\n                                card.color = state.color[color];\n                                card.number = state.number[number];\n                                card.shading = state.shading[shading];\n                                card_deck.push(card);\n                            }\n                        }\n                    }\n                }\n                return {\n                    ...state, deck:card_deck, level:level\n                };\n\n            case 'Reset':\n                // shuffle_card\n                let new_deck = state.deck;\n                for (let i = new_deck.length - 1; i > 0; i--) {  \n                    let j = Math.floor(Math.random() * (i + 1)); \n                    let temp = new_deck[i]; \n                    new_deck[i] = new_deck[j]; \n                    new_deck[j] = temp; \n                }\n\n                // create_new_current_deck();\n                let new_current_deck = [];\n                for(let i = 0; i < 12; i++){\n                    new_current_deck.push(new_deck[i]);\n                }\n        \n                return {\n                    ...state, deck:new_deck, currentDeck:[...new_current_deck], currentIndex:12, messege:\"Welcome to SET\", clickedCard:[], clickedCardLength:0\n                };\n\n            case 'Draw':\n                let add_deck = [];\n                console.log(state.currentDeck.length+\", \"+state.deck.length+\", \"+state.currentIndex)\n                if(state.currentIndex < 81){\n                    for(let i = state.currentIndex; i < state.currentIndex+3; i++){\n                        add_deck.push(state.deck[i]);\n                    }\n                }else{\n                    return {\n                        ...state, messege:\"No more Cards\"\n                    };\n                }\n                return {\n                    ...state, currentDeck:[...state.currentDeck, ...add_deck], currentIndex:state.currentIndex+3\n                };\n\n            case 'CARDCLICK':\n                let newClickedCard = [...state.clickedCard];\n                let newClickedCardLength = state.clickedCardLength;\n                //If clicked, then cancel\n                if(state.clickedCard.includes(action.data_key)){\n                    var index = state.clickedCard.indexOf(action.data_key);\n                    if (index > -1) {\n                        state.clickedCard.splice(index, 1);\n                    }\n                    newClickedCardLength = newClickedCardLength - 1;\n                    return {\n                        ...state, clickedCard:state.clickedCard, clickedCardLength:newClickedCardLength\n                    };\n                }else{\n                    if(newClickedCard.length < 3){\n                        newClickedCard.push(action.data_key);\n                        newClickedCardLength = newClickedCardLength + 1\n                    }\n                }\n                return {\n                    ...state, clickedCard:newClickedCard, clickedCardLength:newClickedCardLength\n                };\n            case 'Check':\n                if(state.clickedCard.length === 3){\n                    let firCard = state.currentDeck[state.clickedCard[0]];\n                    let secCard = state.currentDeck[state.clickedCard[1]];\n                    let thirCard = state.currentDeck[state.clickedCard[2]];\n\n                    let isSet = \n                        ((firCard.color === secCard.color && firCard.color === thirCard.color && secCard.color === thirCard.color)\n                        || (firCard.color !== secCard.color && firCard.color !== thirCard.color && secCard.color !== thirCard.color))\n                        &&\n                        ((firCard.shape === secCard.shape && firCard.shape === thirCard.shape && secCard.shape === thirCard.shape)\n                        || (firCard.shape !== secCard.shape && firCard.shape !== thirCard.shape && secCard.shape !== thirCard.shape))\n                        && \n                        ((firCard.number === secCard.number && firCard.number === thirCard.number && secCard.number === thirCard.number)\n                        || (firCard.number !== secCard.number && firCard.number !== thirCard.number && secCard.number !== thirCard.number))\n                        && \n                        ((firCard.shading === secCard.shading && firCard.shading === thirCard.shading && secCard.shading === thirCard.shading)\n                        || (firCard.shading !== secCard.shading && firCard.shading !== thirCard.shading && secCard.shading !== thirCard.shading))\n                \n                    let newCurrentDeck = [...state.currentDeck];\n                    let sortDeck = [state.clickedCard[0], state.clickedCard[1], state.clickedCard[2]];\n\n                    let newMessge = \"\";\n                    let newCurrentIndex = state.currentIndex\n                    //Compare Set\n                    if(isSet){\n                        let numberSort = function (a,b) {\n                            return a - b;\n                        };\n                        sortDeck.sort(numberSort);\n                        for(let i = sortDeck.length - 1; i >= 0; i--){\n                            newCurrentDeck.splice(sortDeck[i], 1);\n                        }\n                        newMessge = \"SET is removed\";\n                        if(newCurrentDeck.length < 12 && state.currentIndex < 81){\n                            for(let i = state.currentIndex; i < state.currentIndex+3; i++){\n                                newCurrentDeck.push(state.deck[i]);\n                            }\n                            newCurrentIndex = state.currentIndex+3\n                        }\n                    }else{\n                        newMessge = \"Not a SET\";\n                    }\n                    return {\n                        ...state, clickedCard:[], currentDeck:newCurrentDeck, messege:newMessge, currentIndex:newCurrentIndex, clickedCardLength:0\n                    };\n                }else if(state.clickedCard.includes(action.data_key)){\n                \n                }\n                return {\n                    ...state\n                };\n            default:\n                throw new Error();\n            };\n        }, initialState);\n\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider }"]},"metadata":{},"sourceType":"module"}