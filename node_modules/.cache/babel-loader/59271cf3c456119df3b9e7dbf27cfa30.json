{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card(props) {\n  _s();\n\n  const [shape, setShape] = useState(\"triangle\");\n  const [color, setColor] = useState(\"blue\");\n  const [number, setNumber] = useState(2);\n  const [shading, setShading] = useState(\"pattern-checkers\");\n  const [shapeArr, setShapeArr] = useState([\"rectangle\", \"triangle\", \"diamond\"]);\n  const [colorArr, setColorArr] = useState([\"yello\", \"green\", \"red\"]);\n  const [numArr, setNumArr] = useState([1, 2, 3]);\n  const [shadingArr, setShadingArr] = useState([\"fill\", \"transparent\", \"pattern-checkers\"]);\n\n  const get_fill = () => {\n    let result = \"\";\n\n    if (shading === \"fill\") {\n      result = color;\n    } else if (shading === \"pattern-checkers\") {\n      result = \"url(#pattern-checkers)\";\n    } else {\n      result = \"transparent\";\n    }\n\n    return result;\n  };\n\n  const generate_card = () => {\n    var elements = [];\n\n    for (let i = 0; i < number; i++) {\n      if (shape === \"rectangle\") {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"10,10 40,10 40,90 10,90\",\n              className: \"rectangle\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this));\n      } else if (shape === \"triangle\") {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"25,10 40,90 10,90\",\n              className: \"triangle\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this));\n      } else {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"25,10 40,50 25,90 10,50\",\n              className: \"diamond\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    return elements;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"0\",\n      height: \"0\",\n      children: /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n          id: \"pattern-checkers\",\n          x: \"0\",\n          y: \"0\",\n          width: \"10\",\n          height: \"10\",\n          patternUnits: \"userSpaceOnUse\",\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            class: \"checker\",\n            x: \"0\",\n            width: \"5\",\n            height: \"5\",\n            y: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n            class: \"checker\",\n            x: \"5\",\n            width: \"5\",\n            height: \"5\",\n            y: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), generate_card()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"zCbxTNArsfEgXXf2ZTvd6m4t+7g=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Card.js"],"names":["React","useState","Card","props","shape","setShape","color","setColor","number","setNumber","shading","setShading","shapeArr","setShapeArr","colorArr","setColorArr","numArr","setNumArr","shadingArr","setShadingArr","get_fill","result","generate_card","elements","i","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './Card.css'\n\nfunction Card(props) {\n\n    const [shape, setShape] = useState(\"triangle\");\n    const [color, setColor] = useState(\"blue\");\n    const [number, setNumber] = useState(2);\n    const [shading, setShading] = useState(\"pattern-checkers\");\n\n    const [shapeArr, setShapeArr] = useState([\"rectangle\",\"triangle\",\"diamond\"]);\n    const [colorArr, setColorArr] = useState([\"yello\",\"green\",\"red\"]);\n    const [numArr, setNumArr] = useState([1,2,3]);\n    const [shadingArr, setShadingArr] = useState([\"fill\",\"transparent\",\"pattern-checkers\"]);\n\n    const get_fill = () => {\n        let result = \"\";\n        if(shading === \"fill\"){\n            result = color;\n        }else if(shading === \"pattern-checkers\"){\n            result = \"url(#pattern-checkers)\";\n        }else{\n            result = \"transparent\"\n        }\n        return result;\n    }\n\n    const generate_card = () => {\n        var elements = [];\n        for(let i =0; i < number; i++){\n            if(shape === \"rectangle\"){\n                elements.push(\n                    <div>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"10,10 40,10 40,90 10,90\" className=\"rectangle\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }else if(shape === \"triangle\"){\n                elements.push(\n                    <div>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"25,10 40,90 10,90\" className=\"triangle\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }else{\n                elements.push(\n                    <div>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"25,10 40,50 25,90 10,50\" className=\"diamond\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }\n        }\n        return elements;\n    }\n\n    return (\n        <div className=\"card-container\">\n            <svg width=\"0\" height=\"0\">\n                <defs>\n                    <pattern id=\"pattern-checkers\" x=\"0\" y=\"0\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\">\n                        <rect class=\"checker\" x=\"0\" width=\"5\" height=\"5\" y=\"0\"></rect>\n                        <rect class=\"checker\" x=\"5\" width=\"5\" height=\"5\" y=\"5\"></rect>\n                    </pattern>\n                </defs>\n            </svg>\n            {generate_card()}\n        </div>\n    );\n}\n\nexport default Card;"]},"metadata":{},"sourceType":"module"}