{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport './Card.css';\nimport { store } from './Store.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card(props) {\n  _s();\n\n  const [shape, setShape] = useState(props.shape);\n  const [color, setColor] = useState(props.color);\n  const [number, setNumber] = useState(props.number);\n  const [shading, setShading] = useState(props.shading);\n  const globalState = useContext(store);\n  const {\n    state,\n    dispatch\n  } = globalState;\n\n  const get_fill = () => {\n    let result = \"\";\n\n    if (shading === \"fill\") {\n      result = color;\n    } else if (shading === \"pattern-checkers\") {\n      result = \"url(#\" + color + \")\";\n    } else {\n      result = \"transparent\";\n    }\n\n    return result;\n  };\n\n  const generate_card = () => {\n    var elements = [];\n\n    for (let i = 0; i < number; i++) {\n      if (shape === \"rectangle\") {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"10,10 40,10 40,90 10,90\",\n              className: \"rectangle\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this));\n      } else if (shape === \"triangle\") {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"25,10 40,90 10,90\",\n              className: \"triangle\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this));\n      } else {\n        elements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"svg-container\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"25,10 40,50 25,90 10,50\",\n              className: \"diamond\",\n              stroke: color,\n              fill: get_fill()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    return elements;\n  };\n\n  const card_on_click = e => {\n    dispatch({\n      type: \"CARDCLICK\",\n      data_key: e.target.getAttribute(\"data_key\")\n    });\n    console.log(props.data_key + \", \" + state.clickedCard.includes(props.data_key.toString()));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    data_key: props.data_key,\n    className: state.clickedCard.includes(props.data_key) ? [\"card-container\", \"card-clicked\"].join(\" \") : \"card-container\",\n    onClick: e => card_on_click(e),\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"0\",\n      height: \"0\",\n      children: /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n          id: color,\n          x: \"0\",\n          y: \"0\",\n          width: \"10\",\n          height: \"10\",\n          patternUnits: \"userSpaceOnUse\",\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            fill: color,\n            x: \"0\",\n            width: \"5\",\n            height: \"5\",\n            y: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n            fill: color,\n            x: \"5\",\n            width: \"5\",\n            height: \"5\",\n            y: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), generate_card()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"vGNwMySrDaW7jvCfQeAU+xipoMo=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Card.js"],"names":["React","useState","useContext","store","Card","props","shape","setShape","color","setColor","number","setNumber","shading","setShading","globalState","state","dispatch","get_fill","result","generate_card","elements","i","push","card_on_click","e","type","data_key","target","getAttribute","console","log","clickedCard","includes","toString","join"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport './Card.css'\nimport { store } from './Store.js';\n\nfunction Card(props) {\n\n    const [shape, setShape] = useState(props.shape);\n    const [color, setColor] = useState(props.color);\n    const [number, setNumber] = useState(props.number);\n    const [shading, setShading] = useState(props.shading);\n\n    const globalState = useContext(store);\n    const { state, dispatch } = globalState;\n\n    const get_fill = () => {\n        let result = \"\";\n        if(shading === \"fill\"){\n            result = color;\n        }else if(shading === \"pattern-checkers\"){\n            result = \"url(#\" + color + \")\";\n        }else{\n            result = \"transparent\"\n        }\n        return result;\n    }\n\n    const generate_card = () => {\n        var elements = [];\n        for(let i =0; i < number; i++){\n            if(shape === \"rectangle\"){\n                elements.push(\n                    <div key={i}>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"10,10 40,10 40,90 10,90\" className=\"rectangle\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }else if(shape === \"triangle\"){\n                elements.push(\n                    <div key={i}>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"25,10 40,90 10,90\" className=\"triangle\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }else{\n                elements.push(\n                    <div key={i}>\n                        <svg className=\"svg-container\">\n                            <polygon points=\"25,10 40,50 25,90 10,50\" className=\"diamond\" stroke={color} fill={get_fill()}/>\n                        </svg>\n                    </div>\n                );\n            }\n        }\n        return elements;\n    }\n\n    const card_on_click = (e) => {\n        dispatch({type:\"CARDCLICK\", data_key:e.target.getAttribute(\"data_key\")});\n\n        console.log(props.data_key+\", \"+state.clickedCard.includes(props.data_key.toString()));\n    }\n\n    return (\n        <div data_key={props.data_key} \n            className={state.clickedCard.includes(props.data_key)?[\"card-container\", \"card-clicked\"].join(\" \"):\"card-container\"} \n            onClick={(e)=>card_on_click(e)}>\n            <svg width=\"0\" height=\"0\">\n                <defs>\n                    <pattern id={color} x=\"0\" y=\"0\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\">\n                        <rect fill={color} x=\"0\" width=\"5\" height=\"5\" y=\"0\"></rect>\n                        <rect fill={color}  x=\"5\" width=\"5\" height=\"5\" y=\"5\"></rect>\n                    </pattern>\n                </defs>\n            </svg>\n            {generate_card()}\n        </div>\n    );\n}\n\nexport default Card;"]},"metadata":{},"sourceType":"module"}