{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport './Game.css';\nimport Card from './Card.js';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [shapeArr, setShapeArr] = useState([\"rectangle\", \"triangle\", \"diamond\"]);\n  const [colorArr, setColorArr] = useState([\"yello\", \"green\", \"red\"]);\n  const [numArr, setNumArr] = useState([1, 2, 3]);\n  const [shadingArr, setShadingArr] = useState([\"fill\", \"transparent\", \"pattern-checkers\"]);\n  const [deck, setDeck] = useState([]);\n  const [deckIndex, setDeckIndex] = useState(0);\n  const [currentDeck, setCurrentDeck] = useState([]);\n  useEffect(() => {\n    generate_deck();\n  }, []);\n\n  const generate_deck = () => {\n    let card_deck = [];\n\n    for (let shape in shapeArr) {\n      for (let color in colorArr) {\n        for (let number in numArr) {\n          for (let shading in shadingArr) {\n            let card = {};\n            card.shape = shape;\n            card.color = color;\n            card.number = number;\n            card.shading = shading;\n            card_deck.push(card);\n          }\n        }\n      }\n    }\n\n    setDeck(card_deck);\n  };\n\n  const globalState = useContext(store);\n\n  const start_game = () => {\n    console.log(globalState); // console.log(\"start game\")\n    // setDeckIndex(0);\n    // shuffle_card();\n    // create_new_current_deck();\n    // console.log(\"cards deck:\" + JSON.stringify(currentDeck))\n  };\n\n  const create_new_current_deck = () => {\n    setCurrentDeck([]);\n\n    for (let i = 0; i < 3; i++) {\n      draw_cards();\n    }\n  };\n\n  const draw_cards = () => {\n    console.log(\"draw cards\");\n    let endIndex = deckIndex + 3;\n    setCurrentDeck(currentDeck => [...currentDeck, deck[deckIndex]]);\n    setDeckIndex(deckIndex + 1);\n    console.log(deckIndex); // while(deckIndex < endIndex && deckIndex < deck.length){\n    //     console.log(deckIndex);\n    //     setCurrentDeck(currentDeck => [...currentDeck, deck[deckIndex]]);\n    //     setDeckIndex(deckIndex+1);\n    // }\n  };\n\n  const shuffle_card = () => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contoller_zone\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => generate_deck(),\n        children: \"GEN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => start_game(),\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => draw_cards(),\n        children: \"DRAW\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-zone\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        shape: \"triangle\",\n        color: \"yellow\",\n        number: \"3\",\n        shading: \"pattern-checkers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        shape: \"rectangle\",\n        color: \"red\",\n        number: \"2\",\n        shading: \"pattern-checkers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        shape: \"diamond\",\n        color: \"green\",\n        number: \"1\",\n        shading: \"pattern-checkers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"N3IluO98uHSYEELnI27yqkkAuM4=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js"],"names":["Card","React","useState","useContext","useEffect","store","Game","shapeArr","setShapeArr","colorArr","setColorArr","numArr","setNumArr","shadingArr","setShadingArr","deck","setDeck","deckIndex","setDeckIndex","currentDeck","setCurrentDeck","generate_deck","card_deck","shape","color","number","shading","card","push","globalState","start_game","console","log","create_new_current_deck","i","draw_cards","endIndex","shuffle_card","length","j","Math","floor","random","temp"],"mappings":"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","sourcesContent":["import './Game.css';\nimport Card from './Card.js'\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\n\nfunction Game() {\n\n    const [shapeArr, setShapeArr] = useState([\"rectangle\",\"triangle\",\"diamond\"]);\n    const [colorArr, setColorArr] = useState([\"yello\",\"green\",\"red\"]);\n    const [numArr, setNumArr] = useState([1,2,3]);\n    const [shadingArr, setShadingArr] = useState([\"fill\",\"transparent\",\"pattern-checkers\"]);\n\n    const [deck, setDeck] = useState([]);\n    const [deckIndex, setDeckIndex] = useState(0);\n    const [currentDeck, setCurrentDeck] = useState([]);\n\n    useEffect(() => {\n        generate_deck();\n    }, []);\n\n    const generate_deck = () => {\n        let card_deck = []\n        for(let shape in shapeArr){\n            for(let color in colorArr){\n                for(let number in numArr){\n                    for(let shading in shadingArr){\n                        let card = {};\n                        card.shape = shape;\n                        card.color = color;\n                        card.number = number;\n                        card.shading = shading;\n                        card_deck.push(card);\n                    }\n                }\n            }\n        }\n        setDeck(card_deck);\n    }\n\n    const globalState = useContext(store);\n    const start_game = () => {\n        \n        console.log(globalState);\n        // console.log(\"start game\")\n        // setDeckIndex(0);\n        // shuffle_card();\n        // create_new_current_deck();\n        // console.log(\"cards deck:\" + JSON.stringify(currentDeck))\n    }\n\n    const create_new_current_deck = () => {\n        setCurrentDeck([]);\n        for(let i = 0; i < 3; i++){\n            draw_cards();\n        }\n    }\n\n    const draw_cards = () => {\n        console.log(\"draw cards\")\n        let endIndex = deckIndex + 3;\n        setCurrentDeck(currentDeck => [...currentDeck, deck[deckIndex]]);\n        setDeckIndex(deckIndex+1);\n        console.log(deckIndex)\n\n        // while(deckIndex < endIndex && deckIndex < deck.length){\n        //     console.log(deckIndex);\n        //     setCurrentDeck(currentDeck => [...currentDeck, deck[deckIndex]]);\n        //     setDeckIndex(deckIndex+1);\n        // }\n    }\n\n    const shuffle_card = () => {\n        for (let i = deck.length - 1; i > 0; i--) {  \n            let j = Math.floor(Math.random() * (i + 1)); \n            let temp = deck[i]; \n            deck[i] = deck[j]; \n            deck[j] = temp; \n        } \n    }\n\n    return (\n        <div>\n            <div className=\"contoller_zone\">\n                <div className=\"controller-button\" onClick = {() => generate_deck()}>\n                    GEN\n                </div>\n                <div className=\"controller-button\" onClick = {() => start_game()}>\n                    RESET\n                </div>\n                <div className=\"controller-button\" onClick = {() => draw_cards()}>\n                    DRAW\n                </div>\n            </div>\n            <div className=\"card-zone\">\n                <Card shape=\"triangle\" color=\"yellow\" number=\"3\" shading=\"pattern-checkers\" />\n                <Card shape=\"rectangle\" color=\"red\" number=\"2\" shading=\"pattern-checkers\"/>\n                <Card shape=\"diamond\" color=\"green\" number=\"1\" shading=\"pattern-checkers\" />\n                <Card/>\n                <Card/>\n                <Card/>\n            </div>\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}