{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  shape: [\"rectangle\", \"triangle\", \"diamond\"],\n  color: [\"yellow\", \"green\", \"red\"],\n  number: [1, 2, 3],\n  shading: [\"fill\", \"transparent\", \"pattern-checkers\"],\n  deck: [],\n  currentDeck: [],\n  currentIndex: 0,\n  clickedCard: []\n};\nconst store = /*#__PURE__*/createContext(initialState);\nconst {\n  Provider\n} = store;\n\nconst StateProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'GenerateDeck':\n        let card_deck = [];\n\n        for (let shape in state.shape) {\n          for (let color in state.color) {\n            for (let number in state.number) {\n              for (let shading in state.shading) {\n                let card = {};\n                card.shape = state.shape[shape];\n                card.color = state.color[color];\n                card.number = state.number[number];\n                card.shading = state.shading[shading];\n                card_deck.push(card);\n              }\n            }\n          }\n        }\n\n        return { ...state,\n          deck: card_deck\n        };\n\n      case 'Reset':\n        // shuffle_card\n        let new_deck = state.deck;\n\n        for (let i = new_deck.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = new_deck[i];\n          new_deck[i] = new_deck[j];\n          new_deck[j] = temp;\n        } // create_new_current_deck();\n\n\n        let new_current_deck = [];\n\n        for (let i = 0; i < 12; i++) {\n          new_current_deck.push(new_deck[i]);\n        }\n\n        return { ...state,\n          deck: new_deck,\n          currentDeck: [...new_current_deck],\n          currentIndex: 12\n        };\n\n      case 'Draw':\n        let add_deck = [];\n        console.log(state.currentDeck.length + \", \" + state.deck.length);\n\n        if (state.currentDeck.length < state.deck.length) {\n          for (let i = state.currentIndex; i < state.currentIndex + 3; i++) {\n            add_deck.push(state.deck[i]);\n          }\n        } else {\n          alert(\"No More Cards\");\n          return { ...state\n          };\n        }\n\n        return { ...state,\n          currentDeck: [...state.currentDeck, ...add_deck],\n          currentIndex: state.currentIndex + 3\n        };\n\n      case 'CLEAR':\n        return { ...state,\n          currentDeck: []\n        };\n\n      case 'CARDCLICK':\n        let newClickedCard = [...state.clickedCard, action.data_key];\n\n        if (newClickedCard.length === 3) {\n          let firCard = state.currentDeck[newClickedCard[0]];\n          let secCard = state.currentDeck[newClickedCard[1]];\n          let thirCard = state.currentDeck[newClickedCard[2]];\n          let same = firCard.color === secCard.color && firCard.color === thirCard.color && secCard.color === thirCard.color && firCard.shape === secCard.shape && firCard.shape === thirCard.shape && secCard.shape === thirCard.shape && firCard.shading === secCard.shading && firCard.shading === secCard.shading && secCard.shading === thirCard.shading;\n          let different = firCard.color !== secCard.color && firCard.color !== thirCard.color && secCard.color !== thirCard.color && firCard.shape !== secCard.shape && firCard.shape !== thirCard.shape && secCard.shape !== thirCard.shape && firCard.shading !== secCard.shading && firCard.shading !== secCard.shading && secCard.shading !== thirCard.shading; // console.log(JSON.stringify(state.currentDeck[newClickedCard[0]]))\n          // console.log(JSON.stringify(state.currentDeck[newClickedCard[1]]))\n          // console.log(JSON.stringify(state.currentDeck[newClickedCard[2]]))\n\n          let newCurrentDeck = [...state.currentDeck];\n\n          if (same || different) {\n            for (let i = 0; i < 3; i++) {\n              newCurrentDeck.splice(newClickedCard[i], 1);\n            }\n          } else {\n            alert(\"Not A Set\");\n          }\n\n          return { ...state,\n            clickedCard: [],\n            currentDeck: newCurrentDeck\n          };\n        }\n\n        return { ...state,\n          clickedCard: newClickedCard\n        };\n\n      default:\n        throw new Error();\n    }\n\n    ;\n  }, initialState);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n\n_s(StateProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StateProvider;\nexport { store, StateProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Store.js"],"names":["React","createContext","useReducer","initialState","shape","color","number","shading","deck","currentDeck","currentIndex","clickedCard","store","Provider","StateProvider","children","state","dispatch","action","type","card_deck","card","push","new_deck","i","length","j","Math","floor","random","temp","new_current_deck","add_deck","console","log","alert","newClickedCard","data_key","firCard","secCard","thirCard","same","different","newCurrentDeck","splice","Error"],"mappings":"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","sourcesContent":["import React, {createContext, useReducer} from 'react';\n\nconst initialState = {\n    shape:[\"rectangle\",\"triangle\",\"diamond\"],\n    color:[\"yellow\",\"green\",\"red\"],\n    number:[1,2,3],\n    shading:[\"fill\",\"transparent\",\"pattern-checkers\"],\n    deck:[],\n    currentDeck:[],\n    currentIndex:0,\n    clickedCard:[]\n};\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ( { children } ) => {\n    const [state, dispatch] = useReducer((state, action) => {\n        switch(action.type) {\n        case 'GenerateDeck':\n            let card_deck = [];\n            for(let shape in state.shape){\n                for(let color in state.color){\n                    for(let number in state.number){\n                        for(let shading in state.shading){\n                            let card = {};\n                            card.shape = state.shape[shape];\n                            card.color = state.color[color];\n                            card.number = state.number[number];\n                            card.shading = state.shading[shading];\n                            card_deck.push(card);\n                        }\n                    }\n                }\n            }\n            return {\n                ...state, deck:card_deck\n            };\n\n        case 'Reset':\n            // shuffle_card\n            let new_deck = state.deck;\n            for (let i = new_deck.length - 1; i > 0; i--) {  \n                let j = Math.floor(Math.random() * (i + 1)); \n                let temp = new_deck[i]; \n                new_deck[i] = new_deck[j]; \n                new_deck[j] = temp; \n            }\n\n            // create_new_current_deck();\n            let new_current_deck = [];\n            for(let i = 0; i < 12; i++){\n                new_current_deck.push(new_deck[i]);\n            }\n        \n            return {\n                ...state, deck:new_deck, currentDeck:[...new_current_deck], currentIndex:12\n            };\n\n        case 'Draw':\n            let add_deck = [];\n            console.log(state.currentDeck.length+\", \"+state.deck.length)\n            if(state.currentDeck.length < state.deck.length){\n                for(let i = state.currentIndex; i < state.currentIndex+3; i++){\n                    add_deck.push(state.deck[i]);\n                }\n            }else{\n                alert(\"No More Cards\");\n                return {\n                    ...state\n                };\n            }\n            return {\n                ...state, currentDeck:[...state.currentDeck, ...add_deck], currentIndex:state.currentIndex+3\n            };\n        case 'CLEAR':\n            return {\n                ...state, currentDeck:[]\n            };\n        case 'CARDCLICK':\n            let newClickedCard = [...state.clickedCard, action.data_key]\n            if(newClickedCard.length === 3){\n                let firCard = state.currentDeck[newClickedCard[0]];\n                let secCard = state.currentDeck[newClickedCard[1]];\n                let thirCard = state.currentDeck[newClickedCard[2]];\n\n                let same = \n                    (firCard.color === secCard.color && firCard.color === thirCard.color && secCard.color === thirCard.color)\n                    && (firCard.shape === secCard.shape && firCard.shape === thirCard.shape && secCard.shape === thirCard.shape)\n                    && (firCard.shading === secCard.shading && firCard.shading === secCard.shading && secCard.shading === thirCard.shading)\n                    \n                let different = \n                    (firCard.color !== secCard.color && firCard.color !== thirCard.color && secCard.color !== thirCard.color)\n                    && (firCard.shape !== secCard.shape && firCard.shape !== thirCard.shape && secCard.shape !== thirCard.shape)\n                    && (firCard.shading !== secCard.shading && firCard.shading !== secCard.shading && secCard.shading !== thirCard.shading)\n                    \n                // console.log(JSON.stringify(state.currentDeck[newClickedCard[0]]))\n                // console.log(JSON.stringify(state.currentDeck[newClickedCard[1]]))\n                // console.log(JSON.stringify(state.currentDeck[newClickedCard[2]]))\n                let newCurrentDeck = [...state.currentDeck];\n                if(same||different){\n                    for(let i = 0; i < 3; i++){\n                        newCurrentDeck.splice(newClickedCard[i], 1);\n                    }\n                }else{\n                    alert(\"Not A Set\");\n                }\n                return {\n                    ...state, clickedCard:[], currentDeck:newCurrentDeck\n                };\n            }\n            return {\n                ...state, clickedCard:newClickedCard\n            };\n        default:\n            throw new Error();\n        };\n    }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider }"]},"metadata":{},"sourceType":"module"}