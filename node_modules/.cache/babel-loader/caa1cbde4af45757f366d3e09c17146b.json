{"ast":null,"code":"var _jsxFileName = \"/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js\",\n    _s = $RefreshSig$();\n\nimport './Game.css';\nimport Card from './Card.js';\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [shapeArr, setShapeArr] = useState([\"rectangle\", \"triangle\", \"diamond\"]);\n  const [colorArr, setColorArr] = useState([\"yellow\", \"green\", \"red\"]);\n  const [numArr, setNumArr] = useState([1, 2, 3]);\n  const [shadingArr, setShadingArr] = useState([\"fill\", \"transparent\", \"pattern-checkers\"]);\n  const [deck, setDeck] = useState([]);\n  const [currentDeck, setCurrentDeck] = useState([]); // const globalState = useContext(store);\n  // console.log(globalState);\n\n  useEffect(() => {\n    generate_deck();\n  }, []);\n\n  const generate_deck = () => {\n    let card_deck = [];\n\n    for (let shape in shapeArr) {\n      for (let color in colorArr) {\n        for (let number in numArr) {\n          for (let shading in shadingArr) {\n            let card = {};\n            card.shape = shapeArr[shape];\n            card.color = colorArr[color];\n            card.number = numArr[number];\n            card.shading = shadingArr[shading];\n            card_deck.push(card);\n          }\n        }\n      }\n    }\n\n    setDeck(card_deck);\n  };\n\n  const start_game = () => {\n    console.log(\"start game\");\n    console.log(\"cards deck:\" + JSON.stringify(currentDeck));\n    shuffle_card();\n    create_new_current_deck();\n  };\n\n  const create_new_current_deck = () => {\n    setCurrentDeck([]);\n\n    for (let i = 0; i < 4; i++) {\n      draw_cards();\n    }\n  };\n\n  const draw_cards = () => {\n    if (currentDeck.length <= deck.length) {\n      console.log(\"draw cards\");\n      let add_deck = [];\n      let deckIndex = currentDeck.length + 3;\n\n      for (let i = 0; i < 3; i++) {\n        add_deck.push(deck[deckIndex]);\n      }\n\n      setCurrentDeck(currentDeck => [...currentDeck, ...add_deck]);\n      console.log(\"cards deck:\" + JSON.stringify(currentDeck));\n    } else {\n      alert(\"No More Cards\");\n    }\n  };\n\n  const shuffle_card = () => {\n    for (let i = deck.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n  };\n\n  const generate_cards = () => {\n    var elements = [];\n    let number = currentDeck.length;\n\n    for (let i = 0; i < number; i++) {\n      let card = currentDeck[i];\n      elements.push( /*#__PURE__*/_jsxDEV(Card, {\n        shape: card.shape,\n        color: card.color,\n        number: card.number,\n        shading: card.shading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this));\n    }\n\n    return elements;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contoller_zone\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => generate_deck(),\n        children: \"GEN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => start_game(),\n        children: \"RESET\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controller-button\",\n        onClick: () => draw_cards(),\n        children: \"DRAW\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-zone\",\n      children: generate_cards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"4pKyp3fJsc0F+LLBJ6klnvhuKEk=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/kenfunk/Desktop/Kenfunk/MSCS-NEU/CS5610-Web Development/work_space/PROJECT_2/the-game-set/src/Game.js"],"names":["Card","React","useState","useContext","useEffect","store","Game","shapeArr","setShapeArr","colorArr","setColorArr","numArr","setNumArr","shadingArr","setShadingArr","deck","setDeck","currentDeck","setCurrentDeck","generate_deck","card_deck","shape","color","number","shading","card","push","start_game","console","log","JSON","stringify","shuffle_card","create_new_current_deck","i","draw_cards","length","add_deck","deckIndex","alert","j","Math","floor","random","temp","generate_cards","elements"],"mappings":"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","sourcesContent":["import './Game.css';\nimport Card from './Card.js'\nimport React, { useState, useContext, useEffect } from 'react';\nimport { store } from './Store.js';\n\nfunction Game() {\n\n    const [shapeArr, setShapeArr] = useState([\"rectangle\",\"triangle\",\"diamond\"]);\n    const [colorArr, setColorArr] = useState([\"yellow\",\"green\",\"red\"]);\n    const [numArr, setNumArr] = useState([1,2,3]);\n    const [shadingArr, setShadingArr] = useState([\"fill\",\"transparent\",\"pattern-checkers\"]);\n\n    const [deck, setDeck] = useState([]);\n    const [currentDeck, setCurrentDeck] = useState([]);\n\n    // const globalState = useContext(store);\n    // console.log(globalState);\n\n    useEffect(() => {\n        generate_deck();\n    }, []);\n\n    const generate_deck = () => {\n        let card_deck = []\n        for(let shape in shapeArr){\n            for(let color in colorArr){\n                for(let number in numArr){\n                    for(let shading in shadingArr){\n                        let card = {};\n                        card.shape = shapeArr[shape];\n                        card.color = colorArr[color];\n                        card.number = numArr[number];\n                        card.shading = shadingArr[shading];\n                        card_deck.push(card);\n                    }\n                }\n            }\n        }\n        setDeck(card_deck);\n    }\n\n   \n    const start_game = () => {\n        console.log(\"start game\")\n        console.log(\"cards deck:\" + JSON.stringify(currentDeck))\n        shuffle_card();\n        create_new_current_deck();\n    }\n\n    const create_new_current_deck = () => {\n        setCurrentDeck([]);\n        for(let i = 0; i < 4; i++){\n            draw_cards();\n        }\n    }\n\n    const draw_cards = () => {\n        if(currentDeck.length <= deck.length){\n            console.log(\"draw cards\");\n            let add_deck = [];\n            let deckIndex = currentDeck.length + 3\n            for(let i = 0; i < 3; i++){\n                add_deck.push(deck[deckIndex]);\n            }\n            setCurrentDeck(currentDeck => [...currentDeck, ...add_deck]);\n            console.log(\"cards deck:\" + JSON.stringify(currentDeck))\n        }else{\n            alert(\"No More Cards\");\n        }\n    }\n\n    const shuffle_card = () => {\n        for (let i = deck.length - 1; i > 0; i--) {  \n            let j = Math.floor(Math.random() * (i + 1)); \n            let temp = deck[i]; \n            deck[i] = deck[j]; \n            deck[j] = temp; \n        } \n    }\n\n    const generate_cards = () => {\n        var elements = [];\n        let number = currentDeck.length;\n        for(let i =0; i < number; i++){\n            let card = currentDeck[i];\n            elements.push(\n                <Card shape={card.shape} color={card.color} number={card.number} shading={card.shading}/>\n            );\n        }\n        return elements;\n    }\n\n    return (\n        <div>\n            <div className=\"contoller_zone\">\n                <div className=\"controller-button\" onClick = {() => generate_deck()}>\n                    GEN\n                </div>\n                <div className=\"controller-button\" onClick = {() => start_game()}>\n                    RESET\n                </div>\n                <div className=\"controller-button\" onClick = {() => draw_cards()}>\n                    DRAW\n                </div>\n            </div>\n            <div className=\"card-zone\">\n                {generate_cards()}\n            </div>\n        </div>\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}